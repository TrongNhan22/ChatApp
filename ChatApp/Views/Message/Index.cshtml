@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model ChatViewModel
@{
    //@model ChatApp.Pages.Shared.Pages_Shared__Layout;
    Layout = "../../Pages/Shared/_Layout.cshtml";
    string avatarLink = "";
    string name = "";
}

<head>
    <title>SignalR Chat</title>
    <style type="text/css">
        .container-chat {
            background-color: #99CCFF;
            border: thick solid #808080;
            padding: 20px;
            margin: 20px;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="~/lib/helpers/createChatBubble.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/Layout.css"/>
</head>
<body>
    <section style="background-color: #CDC4F9;">
        <div class="container-chat py-5">
            <div class="row">
                <div class="col-md-12">

                    <div class="card" id="chat3" style="border-radius: 15px;">
                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0">

                                    <div class="p-3">

                                        <div class="input-group rounded mb-3">
                                            <input type="search" class="form-control rounded" placeholder="Tìm kiếm bạn bè"
                                                   aria-label="Tìm kiếm bạn bè" aria-describedby="search-addon" 
                                                   id="friendSearch"/>
                                            <span class="input-group-text border-0" id="search-addon" style="cursor:pointer;">
                                                <i class="fas fa-search"></i>
                                            </span>
                                        </div>
                                        <div data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px; overflow-y: scroll">
                                            <ul class="scrollable list-unstyled mb-0">
                                                <!--This is where online user and/or groups will be-->
                                                @if (Model.ChatPartners != null && Model.ChatPartners.Count() > 0)
                                                {
                                                    @foreach (var chatPartner in Model.ChatPartners)
                                                    {
                                                        @if (chatPartner.id == Model.CurrentChatParterId) {
                                                            avatarLink = chatPartner.avatar;
                                                            name = chatPartner.fullname;
                                                        }
                                                        <li class="p-2 border-bottom" style="@(chatPartner.id==Model.CurrentChatParterId?"background-color: #eee;":"")">
                                                            <a class="d-flex justify-content-between" asp-controller="Message" asp-action="Index" asp-route-receiverId="@chatPartner.id">
                                                                <div class="d-flex flex-row">
                                                                    <img src="@chatPartner.avatar" alt="avatar"
                                                                    class="rounded-circle d-flex align-self-center me-3 shadow-1-strong"
                                                                         style="width: 60px; height: 60px; object-fit:cover">
                                                                    <div class="pt-1">
                                                                        <p class="fw-bold mb-0">@chatPartner.fullname</p>
                                                                        <p class="small text-muted">@chatPartner.latestMessage<p>
                                                                    </div>
                                                                </div>
                                                                <div class="pt-1">
                                                                    
                                                                    <p class="small text-muted mb-1">@chatPartner.lastInteractionTime?.ToString("dd-MM-yy hh:mm:ss")</p>
                                                                    @*<span class="badge bg-danger float-end">1</span>*@
                                                                </div>
                                                            </a>
                                                        </li>
                                                    }
                                                }
                                                </ul>
                                        </div>

                                    </div>

                                </div>

                                <div class="col-md-6 col-lg-7 col-xl-8">
                                    <div class="d-flex align-items-center mb-3">
                                        <img src="@avatarLink" alt="avatar"
                                             class="rounded-circle d-flex align-self-center me-3 shadow-1-strong"
                                             style="width: 60px; height: 60px; object-fit:cover">
                                        <h4 class="mb-0">@name</h4>
                                        <!-- Add any additional header elements or actions here -->
                                    </div>
                                    <div id="chatbox" class="pt-3 pe-3 scrollable" data-mdb-perfect-scrollbar="true"
                                         style="position: relative; height: 400px; overflow-y: scroll">
                                        
                                        @if (Model is not null && Model.Messages is not null)
                                            //Chat fetched from MongoDB
                                            @foreach (var message in Model.Messages)
                                            {
                                                //SYSTEM is for testing
                                                @if (message.SenderId == "SYSTEM")
                                                {
                                                    <div class="d-flex flex-row justify-content-center">
                                                        <div>
                                                            <p class="small p-2 ms-3 mb-1 rounded-3" style="background-color: #a3ffb4;">
                                                                @message.Content
                                                            </p>
                                                        </div>
                                                    </div>
                                                }
                                                else if (message.SenderId == Model.SenderId)
                                                {
                                                    <div class="d-flex flex-row justify-content-end">
                                                        <div>
                                                            <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">
                                                                @message.Content
                                                            </p>
                                                            <p class="small me-3 mb-3 rounded-3 text-muted text-end">
                                                                @message.Date.ToString("dd-MM-yy hh:mm:ss")
                                                            </p>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="d-flex flex-row justify-content-start">
                                                        <img src="@avatarLink" alt="avatar" 
                                                             class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" 
                                                             style="width: 40px; height: 40px; object-fit:cover">
                                                        <div>
                                                            <p class="small p-2 ms-3 mb-1 rounded-3" style="background-color: #f5f6f7;">
                                                                @message.Content
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row justify-content-start" >
                                                        <div style="width: 40px;"></div>
                                                        <p class="small ms-3 mb-3 rounded-3 text-muted">@message.Date.ToString("dd-MM-yy hh:mm:ss")</p>
                                                    </div>
                                                }
                                            }
                                        <!--This is where chat content sent from SignalR will be-->
                                    </div>
                                    <div class="text-muted d-flex justify-content-start align-items-center pe-3 pt-3 mt-2">
                                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava6-bg.webp"
                                             alt="avatar 3" style="width: 40px; height: 100%;">
                                        <input type="text" asp-for="Content" class="form-control form-control-lg" id="messageInput"
                                               placeholder="Nhập tin nhắn">
                                        <label class="ms-3 text-muted" for="media"><i class="fas fa-paperclip" style="cursor:pointer;"></i></label>
                                        <input type="file" name="media" id="media" style="display:none; height:0px;width:0px;" />
                                        <a class="ms-3 text-muted" id="sendmessage" style="outline:none; cursor:pointer;"><i class="fas fa-paper-plane" id="sendmessage"></i></a>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </section>
    <!--Script references. -->
    <!--Reference the SignalR library. -->
    <script type="text/javascript" src="~/lib/signalr/signalr.js"></script>
    <script src="~/lib/helpers/createChatBubble.js"></script>
    <!--Add script to update the page and send messages.-->
    <script>
        $(document).ready(function () {
            var chatbox = $('#chatbox');
            chatbox.scrollTop(chatbox.prop('scrollHeight'));          
        });
        document.addEventListener('DOMContentLoaded', function () {
            var messageInput = document.getElementById('messageInput');
            var senderId = "@Model.SenderId";
            var receiverId = "@Model.ReceiverId";
            var friendSearchButton = document.getElementById('search-addon');
            var friendFilter = document.getElementById('friendSearch');
            // Set initial focus to message input box.
            messageInput.focus();
            console.log(senderId);
            console.log(receiverId);

            // Start the connection.
            var connection = new signalR.HubConnectionBuilder()
                .withUrl('/ChatHub')
                .withAutomaticReconnect()
                .build();

            //function addUserElement(userId) {
            //    var userListBox = document.getElementById("userlist");
            //    var userElement = document.createElement('div');
            //    userElement.className = "p-2 border-bottom";
            //    userElement.innerHTML = `<p class="fw-bold mb-0">${userId}</p>`;
            //    userListBox.appendChild(userElement);
            //}

            //function removeUserElement(userId) {
            //    var userListBox = document.getElementById("userlist");
            //    console.log("User list Box", userListBox.children);
            //    for (var child of userListBox.children) {
            //        if (child.textContent === userId){
            //            userListBox.removeChild(child);
            //            break;
            //        }
            //    }
            //}

            // Create a function that the hub can call to broadcast messages.
            connection.on('broadcastMessage', function (message) {
                // Add the message to the page.
                var chatElement = document.createElement('div');
                var innerHtml = createChatBubble(message, senderId, "@avatarLink");
                chatElement.innerHTML = innerHtml;
                var chatBox = document.getElementById('chatbox');
                chatBox.appendChild(chatElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            });

            connection.on('receivePrivate', function (message) {
                console.log(message);
                // Add the message to the page.
                var chatElement = document.createElement('div');
                var innerHtml = createChatBubble(message, senderId, "@avatarLink");
                chatElement.innerHTML = innerHtml;
                var chatBox = document.getElementById('chatbox');
                chatBox.appendChild(chatElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            });
            //connection.on('ReceiveCurrentUserList', function (users){
            //    connectedUserList = users;
            //    users.forEach((user) =>{
            //        addUserElement(user);
            //    });
            //});
            
            //Function for testing
            //connection.on('UserJoined', function (connectionId){
            //    connectedUserList.push(connectionId);
            //    addUserElement(connectionId);
            //});

            //connection.on('UserLeft', function (connectionId) {
            //    const index = connectedUserList.indexOf(connectionId);
            //    if (index < 0) return;
            //    connectedUserList.splice(index, 1);
            //    removeUserElement(connectionId);
            //});

            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    name = connection.connectionId;
                    console.log('connection started');
                    document.getElementById('sendmessage').addEventListener('click', function (event) {
                        if (messageInput.value === '' || messageInput.value == null) return;
                        var messageModel = {
                            Id: '',
                            SenderId: senderId,
                            ReceiverId: receiverId,
                            Content: messageInput.value,
                            Media: ''
                        }
                        connection.invoke('SendPrivate', messageModel);

                        // Clear text box and reset focus for next comment.
                        messageInput.value = '';
                        messageInput.focus();
                    });
                    messageInput.addEventListener('keydown', function (event) {
                        if (event.key =='Enter') {
                            if (messageInput.value === '' || messageInput.value == null) return;
                            var messageModel = {
                                Id: '',
                                SenderId: senderId,
                                ReceiverId: receiverId,
                                Content: messageInput.value,
                                Media: ''
                            }
                            connection.invoke('SendPrivate', messageModel);

                            // Clear text box and reset focus for next comment.
                            messageInput.value = '';
                            messageInput.focus();
                        }
                    });
                })
                .catch(error => {
                    console.error(error.message);
                });
        });
    </script>
</body>