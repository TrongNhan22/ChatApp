<!DOCTYPE html>
<html>
<head>
    <title>SignalR Chat</title>
    <style type="text/css">
        .container {
            background-color: #99CCFF;
            border: thick solid #808080;
            padding: 20px;
            margin: 20px;
        }
    </style>
</head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<body>
    <section style="background-color: #CDC4F9;">
        <div class="container py-5">

            <div class="row">
                <div class="col-md-12">

                    <div class="card" id="chat3" style="border-radius: 15px;">
                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0">

                                    <div class="p-3">

                                        <div class="input-group rounded mb-3">
                                            <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search"
                                                   aria-describedby="search-addon" />
                                            <span class="input-group-text border-0" id="search-addon">
                                                <i class="fas fa-search"></i>
                                            </span>
                                        </div>

                                        <div data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px; overflow-y: scroll">
                                            <ul class="scrollable" class="list-unstyled mb-0" id="userlist">
                                                <!--This is where online user and/or groups will be-->
                                            </ul>
                                        </div>

                                    </div>

                                </div>

                                <div class="col-md-6 col-lg-7 col-xl-8">

                                    <div id="chatbox" class="pt-3 pe-3 scrollable" data-mdb-perfect-scrollbar="true"
                                         style="position: relative; height: 400px; overflow-y: scroll">
                                        <!--This is where chat content will be-->
                                    </div>

                                    <div class="text-muted d-flex justify-content-start align-items-center pe-3 pt-3 mt-2">
                                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava6-bg.webp"
                                             alt="avatar 3" style="width: 40px; height: 100%;">
                                        <input type="text" class="form-control form-control-lg" id="messageinput"
                                               placeholder="Nhập tin nhắn">
                                               <button id="sendmessage">Send</button>
                                        <a class="ms-1 text-muted" href="#!"><i class="fas fa-paperclip"></i></a>
                                        <a class="ms-3 text-muted" href="#!"><i class="fas fa-smile"></i></a>
                                        <a class="ms-3" href="#!"><i class="fas fa-paper-plane"></i></a>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </section>
    <!--Script references. -->
    <!--Reference the SignalR library. -->
    <script type="text/javascript" src="~/lib/signalr/signalr.js"></script>
    <script src="~/lib/helpers/createChatBubble.js"></script>
    <!--Add script to update the page and send messages.-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            var connectedUserList = [];
            var messageInput = document.getElementById('messageinput');

            var name = '';
            // Set initial focus to message input box.
            messageInput.focus();

            // Start the connection.
            var connection = new signalR.HubConnectionBuilder()
                .withUrl('/ChatHub')
                .build();

            function addUserElement(userId) {
                var userListBox = document.getElementById("userlist");
                var userElement = document.createElement('div');
                userElement.className = "p-2 border-bottom";
                userElement.innerHTML = `<p class="fw-bold mb-0">${userId}</p>`;
                userListBox.appendChild(userElement);
            }

            function removeUserElement(userId) {
                var userListBox = document.getElementById("userlist");
                console.log("User list Box", userListBox.children);
                for (var child of userListBox.children) {
                    if (child.textContent === userId){
                        userListBox.removeChild(child);
                        break;
                    }
                }
            }

            // Create a function that the hub can call to broadcast messages.
            connection.on('broadcastMessage', function (message) {
                // Add the message to the page.
                var chatElement = document.createElement('div');
                var innerHtml = createChatBubble(message, name);

                chatElement.innerHTML = innerHtml;
                var chatBox = document.getElementById('chatbox');
                chatBox.appendChild(chatElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            });

            connection.on('ReceiveCurrentUserList', function (users){
                connectedUserList = users;
                users.forEach((user) =>{
                    addUserElement(user);
                });
                //for (var user in users) {
                //    console.log(user);
                //    addUserElement(user);
                //}
            });
            
            connection.on('UserJoined', function (connectionId){
                connectedUserList.push(connectionId);
                addUserElement(connectionId);
            });

            connection.on('UserLeft', function (connectionId) {
                const index = connectedUserList.indexOf(connectionId);
                if (index < 0) return;
                connectedUserList.splice(index, 1);
                removeUserElement(connectionId);
            });

            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    name = connection.connectionId;
                    console.log('connection started');
                    document.getElementById('sendmessage').addEventListener('click', function (event) {
                        if (messageInput.value === '' || messageInput.value == null) return;
                        var messageModel = {
                            Id: '',
                            SenderId: name,
                            ReceiverId: '',
                            Content: messageInput.value,
                            Media: '',
                        }

                        connection.invoke('send', messageModel);

                        // Clear text box and reset focus for next comment.
                        messageInput.value = '';
                        messageInput.focus();
                    });
                })
                .catch(error => {
                    console.error(error.message);
                });
        });
    </script>
</body>
</html>